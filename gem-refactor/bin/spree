#!/usr/bin/env ruby 

#NOTE: This script adapted from the Hobo Project (http://hobocentral.net/)

require 'fileutils'
Signal.trap("INT") { puts; exit }

#hobo_src = File.join(File.dirname(__FILE__), "../hobo_files/plugin")
starter_app = File.join(File.dirname(__FILE__), "../starter-app")

#USAGE = "USAGE: spree [ --user-model <model-name-or-false> ] [ --svn ] [--db] [--hobo-src <path to hobo src>] <app-path>"
USAGE = "USAGE: spree [ --edge ] <app-path> "

RAILSCART_REPO = "http://railscart.googlecode.com/svn/trunk/railscart/"


### Nasty stuff needed for Windows :-( ###
require 'rbconfig'

if Config::CONFIG["arch"] =~ /win32/
  require "win32/registry"
  def system(command)
    win = Win32API.new("crtdll", "system", ['P'], 'L').Call(command)
  end
end 
### end nasty stuff ###


def command(*s)
  ok = system(s.join(' '))
  exit(1) unless ok
end

if ARGV.length == 0 || ARGV.include?("--help")
  puts USAGE
  exit 1
end

app_path = ARGV.pop
plugins_dir = app_path + "/vendor/plugins"

#user_model = "user"
#hobo_svn = create_db = false

edge = false

until ARGV.empty?
  case ARGV.shift
  when "--edge"
    edge = true
  #when "--user-model"
  #  arg = ARGV.shift
  #  user_model = arg == "false" ? nil : arg
  #when "--svn"
  #  hobo_svn = true
  #when "--db"
  #  create_db = true
  #when "--hobo-src"
  #  hobo_src = "../" + ARGV.shift
  else
    puts USAGE
    exit 1
  end 
end

puts "\nGenerating Spree application...\n"
 
# Create a new rails app by copying the starter app and renaming
FileUtils.cp_r starter_app, app_path
FileUtils.mkdir_p "#{app_path}/log"

# setup database config
#require 'erb'
#File.open("#{app_path}/config/database.yml", 'w') {|f| f.write ERB.new(IO.read("configs/databases/mysql.yml"), nil, '-').result(binding)}
  
# replace plugins with latest versions from SVN
if edge
  FileUtils.remove_dir plugins_dir
  FileUtils.mkdir_p plugins_dir
  puts "\nGrabbing edge versions of required plugins from SVN ...\n"

  Dir.chdir(app_path) do
    gen = "ruby #{File.join('script', 'generate')}"
    plugin = "ruby #{File.join('script', 'plugin')}"

    puts "\nInstalling acts_as_list\n"
    command(plugin, "install http://svn.rubyonrails.org/rails/plugins/acts_as_list")

    puts "\nInstalling acts_as_tree\n"
    command(plugin, "install http://svn.rubyonrails.org/rails/plugins/acts_as_tree")

    puts "\nInstalling attachment_fu\n"
    command(plugin, "install http://svn.techno-weenie.net/projects/plugins/attachment_fu")

    puts "\nInstalling calendar_date_select\n"
    command(plugin, "install http://calendardateselect.googlecode.com/svn/tags/calendar_date_select")

    puts "\nInstalling engines\n"
    command(plugin, "install http://svn.rails-engines.org/engines/trunk")

    puts "\nInstalling in_place_editing\n"
    command(plugin, "install http://svn.rubyonrails.org/rails/plugins/in_place_editing")

    puts "\nInstalling paginating_find\n"
    command(plugin, "install http://svn.cardboardrocket.com/paginating_find")

    puts "\nInstalling railscart\n"
    command(plugin, "install http://railscart.googlecode.com/svn/railscart/trunk/")

  end
   
end  
  
#Dir.chdir(app_path) do
  #gen = "ruby #{File.join('script', 'generate')}"
  #plugin = "ruby #{File.join('script', 'plugin')}"

  #FileUtils.touch("public/stylesheets/application.css")

  #puts "\nInstalling classic_pagination\n"
  #command(plugin, "install svn://errtheblog.com/svn/plugins/classic_pagination")
  
  #for now we're going to force install from svn
  #puts "\nInstalling Railscart plugin via svn checkout...\n"
  #command("svn co #{RAILSCART_REPO} vendor/plugins/railscart")
  
  #if hobo_svn
  #  puts "\nInstalling Hobo plugin via svn checkout...\n"
  #  command("svn co #{HOBO_REPO} vendor/plugins/hobo")
  #else
  #  puts "\nInstalling Hobo plugin...\n"
  #  FileUtils.cp_r hobo_src, "vendor/plugins/hobo"
  #end

  #puts "\nInitialising Hobo...\n"  
  #command(gen, "hobo --add-routes")

  #puts "\nInstalling Hobo Rapid and default theme...\n"
  #command("#{gen} hobo_rapid --import-tags")

  #if user_model
  #  puts "\nCreating #{user_model} model and controller...\n"
  #  command("#{gen} hobo_user_model #{user_model}")
  #  command("#{gen} hobo_user_controller #{user_model}")
  #end
  
  #puts "\nCreating standard pages...\n"
  #command("#{gen} hobo_front_controller front --delete-index --add-routes")
  
  #if create_db
  #  puts "\nCreating databases"
  #  command("rake db:create:all")
  #end
#end

puts "Finished."

